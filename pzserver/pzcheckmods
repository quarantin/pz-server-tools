#!/etc/pzst/env/bin/python

import os
from os.path import dirname, exists, isfile, join, realpath

import sys
import json
import time
import errno

from retry import retry
from subprocess import Popen, DEVNULL
from datetime import datetime, timedelta
from pypzst import get_mod_updates, init_log, save_bot_data


class PZModMonitor:

	def __init__(self, config, restart=False, update_cache=False):

		self.server_configs = {}

		servers = config.get('pzservers', [])

		self.logger = init_log('PZModMonitor', 'pzmodmonitor')

		mods = self.get_all_server_mods(servers)

		old_cache = self.get_old_cache()
		new_cache = self.get_new_cache(mods)

		updated_mods = self.check_mod_updates(old_cache, new_cache)
		if not updated_mods:
			self.logger.info('No mod update detected')

		if update_cache:
			with open(cache_path, 'w') as fd:
				fd.write(json.dumps(new_cache) + os.linesep)
			save_bot_data(self.server_configs, updated_mods)

		if restart:
			self.restart_servers(updated_mods)

	def get_all_server_mods(self, servers):

		mods = set()

		for server in servers:

			server_config = self.parse_server_config(server)
			for mod in server_config.get('WorkshopItems', []):
				mods.add(mod)

		return mods

	def parse_server_config(self, server):

		server_config = {}
		self.server_configs[server] = server_config

		server_ini = '/home/%s/Zomboid/Server/servertest.ini' % server
		if not isfile(server_ini):
			return server_config

		with open(server_ini) as fd:
			lines = fd.readlines()

		for line in lines:

			line = line.strip()
			if not line:
				continue

			tokens = line.split('=', 1)

			key = tokens[0].strip()
			value = tokens[1].strip()

			values = set()
			for value in value.split(';'):
				value = value.strip()
				if value:
					values.add(value)

			server_config[key] = values

		return server_config

	def get_old_cache(self):

		old_cache = {}

		if isfile(cache_path):
			with open(cache_path) as fd:
				old_cache = json.loads(fd.read())

		return old_cache

	def get_new_cache(self, mods):
		return get_mod_updates(mods)

	def check_mod_updates(self, old_cache, new_cache):

		mods = {}

		for mod_id, mod in new_cache.items():

			if mod_id not in old_cache:
				self.logger.info('New mod detected: [' + mod_id + '] ' + mod['name'])
				mod['status'] = 'new'
				mods[mod_id] = mod

			else:
				old_update = old_cache[mod_id]['updated']
				new_update = new_cache[mod_id]['updated']
				if old_update < new_update:
					self.logger.info('Mod update detected: [' + mod_id + '] ' + mod['name'])
					mod['status'] = 'updated'
					mods[mod_id] = mod

		return mods

	def restart_servers(self, mods):

		servers_to_restart = set()

		for mod_id in mods:
			for server, server_config in self.server_configs.items():
				if mod_id in server_config.get('WorkshopItems', []):
					servers_to_restart.add(server)
					continue

		for server in servers_to_restart:
			self.logger.info('Starting restart job for server ' + server)
			self.restart_server(server)

	def restart_server(self, server):

		args = {
			'stdin':     DEVNULL,
			'stdout':    DEVNULL,
			'stderr':    DEVNULL,
		}

		Popen(['/usr/local/bin/pzrestartjob', server], **args)

if __name__ == '__main__':

	config_path = '/etc/pzst/config.json'
	if not isfile(config_path):
		print('Configuration not found: ' + config_path, file=sys.stderr)
		sys.exit(1)

	with open(config_path) as fd:
		config = json.loads(fd.read())

	cache_path = '/var/cache/pzst/cache.json'

	restart      = '-r' in sys.argv or '--restart'      in sys.argv
	update_cache = '-u' in sys.argv or '--update-cache' in sys.argv

	PZModMonitor(config, restart=restart, update_cache=update_cache)
