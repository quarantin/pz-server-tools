#!/etc/pzst/env/bin/python

import os
from os.path import dirname, exists, isfile, join, realpath

import sys
import json
import time
import errno

from retry import retry
from subprocess import Popen, DEVNULL
from datetime import datetime, timedelta
from pypzst import get_mod_updates, init_log, parse_server_config


class PZModMonitor:

	def __init__(self, config, restart=False, update_cache=False):

		servers = config.get('pzservers', [])

		self.logger = init_log('PZModMonitor', 'pzmodmonitor')

		mods = self.get_all_server_mods(servers)

		old_cache = self.get_old_cache()
		new_cache = self.get_new_cache(mods)

		if update_cache:
			with open(cache_path, 'w') as fd:
				fd.write(json.dumps(new_cache) + os.linesep)

		updated_mods = self.check_mod_updates(old_cache, new_cache)
		#if not updated_mods:
		#	self.logger.info('No mod update detected')

		if restart:
			self.restart_servers(updated_mods)

	def get_all_server_mods(self, servers):

		mods = set()
		self.server_configs = {}

		for server in servers:

			self.server_configs[server] = parse_server_config(server)
			for mod in self.server_configs[server].get('WorkshopItems', []):
				mods.add(mod)

		return mods

	def get_old_cache(self):

		old_cache = {}

		if isfile(cache_path):
			with open(cache_path) as fd:
				old_cache = json.loads(fd.read())

		return old_cache

	def get_new_cache(self, mods):
		return get_mod_updates(mods)

	def check_mod_updates(self, old_cache, new_cache):

		mods = set()

		for mod_id, mod in new_cache.items():

			if mod_id not in old_cache:
				self.logger.info('New mod detected: [' + mod_id + '] ' + mod['name'])
				mods.add(mod_id)

			else:
				old_update = old_cache[mod_id]['updated']
				new_update = new_cache[mod_id]['updated']
				if old_update < new_update:
					self.logger.info('Mod update detected: [' + mod_id + '] ' + mod['name'])
					mods.add(mod_id)

		return mods

	def restart_servers(self, mods):

		servers_to_restart = set()

		for mod in mods:
			for server, server_config in self.server_configs.items():
				if mod in server_config.get('WorkshopItems', []):
					servers_to_restart.add(server)
					continue

		for server in servers_to_restart:
			self.logger.info('Starting restart job for server ' + server)
			self.restart_server(server)

	def restart_server(self, server):

		args = {
			'stdin':     DEVNULL,
			'stdout':    DEVNULL,
			'stderr':    DEVNULL,
		}

		Popen(['/usr/local/bin/pzrestartjob', server], **args)

if __name__ == '__main__':

	config_path = '/etc/pzst/config.json'
	if not isfile(config_path):
		print('Configuration not found: ' + config_path, file=sys.stderr)
		sys.exit(1)

	with open(config_path) as fd:
		config = json.loads(fd.read())

	cache_path = '/var/cache/pzst/cache.json'

	restart      = '-r' in sys.argv or '--restart'      in sys.argv
	update_cache = '-u' in sys.argv or '--update-cache' in sys.argv

	PZModMonitor(config, restart=restart, update_cache=update_cache)
