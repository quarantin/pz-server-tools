#!/bin/bash

if [ -z "${USER}" ]; then
	export USER="$(id -un)"
fi

NAME='pzst'

BIN='/usr/local/bin'
LIB='/usr/local/lib/pzst'
if [ -z "$(echo $PATH | grep "${BIN}")" ]; then
	PATH="${PATH}:${BIN}"
fi

LOGDIR='/var/log/pzst'
PYTHON='/usr/bin/python'

CACHEDIR="/var/cache/${NAME}"
CACHEFILE='cache.json'
CACHE="${CACHEDIR}/${CACHEFILE}"

CONFIGDIR="/etc/${NAME}"
CONFIGENV="${CONFIGDIR}/env"
CONFIGFILE="config.json"
CONFIG="${CONFIGDIR}/${CONFIGFILE}"

LOCALCONFIGDIR="${HOME}/.pzst"
LOCALCONFIG="${LOCALCONFIGDIR}/config.json"
LOCALCRONDIR="${LOCALCONFIGDIR}/crontabs"
LOCALLOG="${LOCALCONFIGDIR}/pzst.log"

CRONDIR="/etc/cron.d"
CRONFILE="${CRONDIR}/${NAME}"

LOCK="${CACHEDIR}/lock"
KILLSWITCH="${CACHEDIR}/kill.${USER}"
SOCKETPATH="${CACHEDIR}/pzst.sock"
RESTARTJOBPATH="${CACHEDIR}/restartjob.${USER}"

STEAM="${HOME}/Steam"
STEAMCMD="${STEAM}/steamcmd.sh"
STEAMCMDARCHIVE='steamcmd_linux.tar.gz'
STEAMCMDARCHIVEPATH="/tmp/${STEAMCMDARCHIVE}"
STEAMCMD_URL="https://steamcdn-a.akamaihd.net/client/installer/${STEAMCMDARCHIVE}"

ZOMBOIDGAMEID='108600'
ZOMBOID="${HOME}/Zomboid"
PZSERVER="${HOME}/pzserver"
PZSERVERDB="${ZOMBOID}/db/servertest.db"
PZSERVERDIR="${ZOMBOID}/Server"
PZSERVERLOG="${ZOMBOID}/server-console.txt"
PZSERVERSAVE="${ZOMBOID}/Saves"
PZSERVERBACKUP="${ZOMBOID}/Backups"
PZSERVERCONFIG="${PZSERVERDIR}/servertest.ini"
PZSERVERMAPDIR="${PZSERVER}/media/maps"
PZSERVERMODDIR="${PZSERVER}/steamapps/workshop/content/${ZOMBOIDGAMEID}"
PZSERVERSANDBOX="${PZSERVERDIR}/servertest_SandboxVars.lua"
PZSERVERSPAWNPOINTS="${PZSERVERDIR}/servertest_spawnpoints.lua"
PZSERVERSPAWNREGIONS="${PZSERVERDIR}/servertest_spawnregions.lua"
PZSERVERLOCK="${CACHEDIR}/pzserver.${USER}.lock"

JAVAMODSVERSION=0.0.1
JAVAMODSARCHIVE="javamods-${JAVAMODSVERSION}.zip"
JAVAMODSCONFIGDIR="${HOME}/.javamods"
JAVAMODSCONFIG="${JAVAMODSCONFIGDIR}/config.json"
JAVAMODSSTART="${PZSERVER}/javamods-start-server.sh"
JAVAMODSCONSOLE="${ZOMBOID}/javamods-console.txt"
JAVAMODSURL="https://github.com/quarantin/javamods/releases/download/${JAVAMODSVERSION}/${JAVAMODSARCHIVE}"

if [ "${UID}" = '0' ] && [ "${ALLOW_ROOT}" != 'true' ]; then
	echo Don\'t run this command as root
	exit
fi

REPO="$(dirname "$(dirname "${0}")")"
if [ -f "${CONFIG}" ]; then
    REPO="$(jq -r '.install' "${CONFIG}")"
	EDITOR="$(jq -r 'try .editor // "nano"' "${CONFIG}" 2> /dev/null)"
	if [ -z "${EDITOR}" ]; then
		EDITOR=nano
	fi
fi

if [ -f "${LOCALCONFIG}" ]; then
	MAXMEM="$(jq -r 'try .maxmem // 8' "${LOCALCONFIG}" 2> /dev/null)"
fi

install_steamcmd() {

	if ! [ -d "${STEAM}" ] || ! [ -f "${STEAMCMD}" ]; then
		mkdir -p ${STEAM}
		wget -q -O "${STEAMCMDARCHIVEPATH}" "${STEAMCMD_URL}"
		tar xf "${STEAMCMDARCHIVEPATH}" -C "${STEAM}"
		rm -f "${STEAMCMDARCHIVEPATH}"
	fi
}

set_pzserverstart() {

	PZSERVERSTARTSCRIPT="$(jq -r 'try .pzserverstart // "start-server.sh"' "${CONFIG}" 2> /dev/null || echo 'start-server.sh')"
	PZSERVERSTART="${PZSERVER}/${PZSERVERSTARTSCRIPT}"
	if ! [ -f "${PZSERVERSTART}" ]; then
		PZSERVERSTART="${PZSERVERSTARTSCRIPT}"
	fi

	if ! [ -f "${PZSERVERSTART}" ]; then
		echo "You specified an alternate start script but the path you specified doesn't exist: ${PZSERVERSTART}"
		PZSERVERSTART="${PZSERVER}/start-server.sh"
		echo "Using default start script: ${PZSERVERSTART}"
	fi

	if [ -f "${JAVAMODSCONFIG}" ] && [ -f "${JAVAMODSSTART}" ]; then
		ENABLEJAVAMODS="$(jq -r 'try .enabled' "${JAVAMODSCONFIG}" 2> /dev/null)"
		if [ "${ENABLEJAVAMODS}" = 'true' ] ; then
			if [ "${PZSERVERSTARTSCRIPT}" = 'start-server.sh' ]; then
				PZSERVERSTART="${JAVAMODSSTART}"
			else
				echo "You specified an alternate start script for pzserver and enabled javamods at the same time, but these two features are incompatible."
				echo "Javamods will be disabled until you removed 'pzserverstart' from ${CONFIG}."
			fi
		fi
	fi
}

read_adminuser() {

	DEFAULT_ADMINUSER='pzadmin'
	echo Enter new administrator username \(default: ${DEFAULT_ADMINUSER}\)
	read -e ADMINUSER

	if [ -z "${ADMINUSER}" ]; then
		ADMINUSER="${DEFAULT_ADMINUSER}"
	fi

	pzst_config --admin "${ADMINUSER}"
}

read_adminpasswd() {

	while true; do

		echo
		echo Enter new administrator password \(will not be echoed\):
		read -s ADMINPASSWD

		echo
		echo Confirm the password:
		read -s CONFIRMADMINPASSWD

		if [ -z "${ADMINPASSWD}" ]; then
			echo
			echo Empty passwords are not allowed!
			continue

		elif [ "${ADMINPASSWD}" = "${CONFIRMADMINPASSWD}" ]; then
			ADMINPASSWDOPTION="-adminpassword ${ADMINPASSWD}"
			break
		fi

		echo
		echo The passwords don\'t match, please try again

	done
}

read_port() {

	DEFAULT_PORT='16261'
	while true; do

		echo
		echo Select Port \(default: ${DEFAULT_PORT}\):
		read -e PORT

		if [ -z "${PORT}" ]; then
			PORT="${DEFAULT_PORT}"
		fi

		OUTPUT=$(ss -nluw | grep ":${PORT} ")
		if [ -z "${OUTPUT}" ]; then
			mkdir -p "${PZSERVERDIR}"
			touch "${PZSERVERCONFIG}"
			chmod 644 "${PZSERVERCONFIG}"
			DEFAULTPORTSET="$(grep DefaultPort "${PZSERVERCONFIG}")"
			if [ -z "${DEFAULTPORTSET}" ]; then
				sed -i "s/.*\(DefaultPort\).*/\1=${PORT}/" "${PZSERVERCONFIG}"
			else
				echo "DefaultPort=${PORT}" >> "${PZSERVERCONFIG}"
			fi

			break
		fi

		echo The port ${PORT} is already in use, please select another port
	done
}

check_admin_exists() {

	ADMINUSER="$(jq -r 'try .admin' "${LOCALCONFIG}" 2> /dev/null)"
	if ! [ -z "${ADMINUSER}" ] && [ "${ADMINUSER}" != 'null' ] && [ -f "${PZSERVERDB}" ]; then
		echo $(sqlite3 "${PZSERVERDB}" "SELECT username FROM whitelist WHERE username='${ADMINUSER}'")
	fi
}

check_first_time() {

	if [ -z "$(check_admin_exists)" ]; then

		read_adminuser

		read_adminpasswd

		read_port
	fi

	ADMINUSER="$(jq -r 'try .admin // "pzadmin"' "${LOCALCONFIG}" 2> /dev/null)"
	ADMINUSEROPTION="-adminusername ${ADMINUSER}"
}

check_is_pzserver_user() {

	if ! [ -d "${PZSERVER}" ]; then
		echo No pzserver installed for user ${USER}
		exit
	fi
}

check_running() {

	PZPID=$(get_pz_pid)
	if [ -z "${PZPID}" ]; then
		echo No running pzserver found
		exit
	fi
}

check_not_running() {

	PZPID=$(get_pz_pid)
	MESSAGE="${1}"
	if [ -z "${MESSAGE}" ]; then
		MESSAGE='pzserver already running'
	fi

	if ! [ -z "${PZPID}" ]; then
		echo -e ${MESSAGE}
		exit
	fi
}

search_pz_pid() {

	PARENT_PID=$(cat /var/cache/pzst/pzserver.pid 2> /dev/null)
	if ! [ -f "/proc/${PARENT_PID}/status" ]; then
		return
	fi

	PPID_STRING="PPid:	${PARENT_PID}"
	while read PROC; do

		grep -l "${PPID_STRING}" "${PROC}/status" 2> /dev/null | cut -f3 -d/

	done < <(find /proc -maxdepth 1 -type d -user "${USER}")
}

get_pz_pid() {

	PIDS=$(search_pz_pid)
	for PID in ${PIDS[@]}; do

		LINK="$(readlink "/proc/${PID}/fd/0")"
		if [ "${LINK}" != '/dev/null' ]; then
			echo $PID
		fi

	done
}

ask_confirmation() {

	MESSAGE="${1}"
	if [ -z "${MESSAGE}" ]; then
		MESSAGE='Are you sure you want to proceed?'
	fi

	while true; do

		echo ${MESSAGE}
		echo
		echo Type \`yes\` to continue, or \`no\` to abort:
		read -e CONFIRM
		echo

		if [ "${CONFIRM}" = 'n' ] || [ "${CONFIRM}" = 'no' ]; then
			return 1

		elif [ "${CONFIRM}" = 'y' ] || [ "${CONFIRM}" = 'yes' ]; then
			return 0
		fi
	done
}
